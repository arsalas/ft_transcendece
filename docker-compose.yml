version: '3.7'

services:
  database:
    image: postgres:alpine3.17
    container_name: ${COMPOSE_PROJECT_NAME}_database
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - database_volume:/var/lib/postgresql
      - database_data_volume:/var/lib/postgresql/data
    ports:
      - "${BBDD_PORT}:5432"
    expose:
      - "5432"
    restart: always
    networks:
      - transcendence

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_backend
    environment:
      CLIENT_ID: ${CLIENT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      TFA_SECRET: ${TFA_SECRET}
    depends_on:
      - database
    ports:
      - "${BACKEND_PORT}:3000"
    command: sh -c "cd /app/ && yarn && yarn start:dev" 
    expose:
      - "3000"
    volumes:
      - backend_volume:/app/node_modules
      - ./backend/:/app/
    networks:
      - transcendence

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_web
    ports:
      - "${WEB_PORT}:5173"
    command: sh -c "cd /app/ && yarn && yarn dev"
    expose:
      - "5173"
    volumes:
      - web_volume:/app/node_modules
      - ./web:/app
    networks:
      - transcendence
 
volumes:
  database_volume:
    external: false
  database_data_volume:
    external: false
  backend_volume:
    external: false
    # driver: local
    # driver_opts:
    #   type: 'none'
    #   o: 'bind'
    #   device: '${PWD}/backend/node_modules'
  web_volume:
    external: false
    # driver: local
    # driver_opts:
    #   type: 'none'
    #   o: 'bind'
    #   device: '${PWD}/web/node_modules'

networks:
  transcendence:
    driver: bridge